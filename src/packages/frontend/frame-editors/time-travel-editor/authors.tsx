/*
 *  This file is part of CoCalc: Copyright © 2020 Sagemath, Inc.
 *  License: AGPLv3 s.t. "Commons Clause" – see LICENSE.md for details
 */

import { Tooltip } from "antd";
import { Map } from "immutable";
const { User } = require("../../users");
import { Loading, r_join } from "../../components";
import { Component, Rendered, rtypes, rclass } from "../../app-framework";
import { TimeTravelActions } from "./actions";
import {
  isEncodedNumUUID,
  decodeUUIDtoNum,
} from "@cocalc/util/compute/manager";
import ComputeServer from "@cocalc/frontend/compute/inline";

interface Props {
  actions: TimeTravelActions;
  version0: number;
  version1: number;

  // redux props
  user_map?: Map<string, any>;
}

class Authors extends Component<Props> {
  static reduxProps() {
    return {
      users: {
        user_map: rtypes.immutable.Map,
      },
    };
  }

  private render_user(account_id: string): Rendered {
    return (
      <User
        account_id={account_id}
        user_map={this.props.user_map}
        key={account_id}
      />
    );
  }

  private render_project(): Rendered {
    return (
      <Tooltip
        title={"This change or output was generated by the Project."}
        key="project-author"
      >
        <span>The Project</span>
      </Tooltip>
    );
  }

  private render_unknown(): Rendered {
    return (
      <Tooltip
        title={"You are no longer a collaborator with this user"}
        key={"unknown-author"}
      >
        <span>Unknown</span>
      </Tooltip>
    );
  }

  renderComputeServer = (id: number) => {
    return (
      <Tooltip
        key={`compute-server${id}`}
        title={
          <>
            This change or output was generated by <ComputeServer id={id} />.
          </>
        }
      >
        <span>
          <ComputeServer id={id} titleOnly />
        </span>
      </Tooltip>
    );
  };

  private render_author(account_id: string): Rendered {
    if (this.props.user_map != null && this.props.user_map.has(account_id)) {
      return this.render_user(account_id);
    } else if (account_id == this.props.actions.project_id) {
      return this.render_project();
    } else if (isEncodedNumUUID(account_id)) {
      return this.renderComputeServer(decodeUUIDtoNum(account_id));
    } else {
      return this.render_unknown();
    }
  }

  private render_content() {
    if (this.props.user_map == null) {
      return <Loading />;
    }
    const v: Rendered[] = [];
    for (const account_id of this.props.actions.get_account_ids(
      this.props.version0,
      this.props.version1,
    )) {
      v.push(this.render_author(account_id));
    }
    if (v.length == 0) return this.render_unknown();
    return r_join(v);
  }

  public render(): Rendered {
    return <span>{this.render_content()}</span>;
  }
}

const tmp = rclass(Authors);
export { tmp as Authors };
